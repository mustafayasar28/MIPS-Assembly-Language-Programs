## CS224 - Lab02 - Part2 

## @author Mustafa Yaşar
## @version 29.02.2020

.data 


sizeInput: .asciiz "Please enter the size of the array: "
line:	.asciiz "\n"
yes: 	.asciiz "Yes"
no:	.asciiz "No"
tab:	.asciiz "\t"
printingMessage:	.asciiz "\n\n**********Printing the Sorted Array*********\n\n"

.globl main
.text

main: 	## execution starts here
	jal initializeArray
	## $v0 is the base address of the array
	## $v1 is the size of the array
	
	add $a0, $v0, $0	## $a0 is the base address of the array (parameter)
	add $a1, $v1, $0	## $a1 is the size of the array (parameter)
	
	jal bubbleSort
	
	jal processArray
	
	li $v0,10	## Execution terminates
	syscall		## See you!

initializeArray:	

	## $v0 is the beginning index of the array
	## $v1 is the size of the array
	addi $sp, $sp, -32
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	sw $s3, 12($sp)
	sw $s4, 16($sp)
	sw $s5, 20($sp)
	sw $ra, 24($sp)
	sw $s6, 28($sp)
	
	la $a0, sizeInput
	li $v0, 4
	syscall
	
	li $v0, 5		## syscall 5 will load the $v0 register with the input
	syscall
	
	add $s0, $v0, $0	## $s0 = size of the array
	
	mul $s6, $v0, 4	## change the integers to bytes
	mflo $s6
	move $a0, $s6	## allocate the size of the array in the heap
	li $v0, 9	## now $v0 has the address of dynamically allocated memory
	syscall
	
	move $s6, $v0
	add $s1, $0, $0	## $s1 = i = 0 ( iteration counter )
	
	forInit:
		slt $s2, $s1, $s0  ## if ( i < size ), $s2 = 1, else $s2 = 0
		beq $s2, 0, doneInit
		li $a1, 100000		## $a1 is the max bound
		li $v0, 42	## generates random number
		syscall
		
		add $s3, $a0, $0  ## $s3 is the random number that was generated
		
		la $a0, line
		li $v0, 4
		syscall
		

		sll $s4, $s1, 2 ## $s4 = i * 4
		add  $s5, $s6, $0	## $s5 is the base address of the array
		add $s4, $s4, $s5 ## $s4 = address of array[i]
		sw $s3, 0($s4) ## array[i] = randInt
		
		addi $s1, $s1, 1
		j forInit
	
	doneInit:
		add $v0, $s5, $0
		add $v1, $s0, $0
		lw $s0, 0($sp)
		lw $s1, 4($sp)
		lw $s2, 8($sp)
		lw $s3, 12($sp)
		lw $s4, 16($sp)
		lw $s5, 20($sp)
		lw $ra, 24($sp)
		lw $s6, 28($sp)
		addi $sp, $sp, 32
		jr $ra
		
bubbleSort:
	addi $sp, $sp, -40
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	sw $s3, 12($sp)
	sw $s4, 16($sp)
	sw $s5, 20($sp)
	sw $s6, 24($sp)
	sw $ra, 28($sp)
	sw $a0, 32($sp)
	sw $a1, 36($sp)
	## $a0 is the base address of the array
	## $a1 is the size of the array
	add $s0, $0, $0	## $s0 = i = 0 ( first iteration counter )
	add $s1, $0, $0 ## $s1 = j = 0 ( second iteration counter )
	addi $a1, $a1, -1 ## $a1 = $a1 - 1 ## n = n - 1
	
	for1:	slt $s2, $s0, $a1	## if i < n - 1, then $s2 = 1, else $s2 = 0
		beq $s2, 0, done1	## if $s2 = 0, jump to done1
		add $s1, $0, $0 
		for2: 	sub $s3, $a1, $s0  ## $s3 = n-1-i
			slt $s4, $s1, $s3  ## if j < n-i-1, $s4 = 1, else $s4 = 0	 
			beq $s4, 0, done2  ## if j >= n-i-1, jump to done2
			
			## $s2 and $s4 are available to use
			## we should get arr[j] and arr[j + 1]
			## remember $a0 is the base address 
			sll $s2, $s1, 2 ## $s2 = $s1 * 4 = j * 4
			add $s2, $s2, $a0 ## $s2 = address of array[j]
			lw $s2,0($s2) ## $s2 = array[j]
			
			add $s7, $s2, $0
			
			add $s5, $s1, 1 ## $s5 = j + 1 
			sll $s4, $s5, 2 ## $s4 = $s1 * 4 = (j + 1) * 4
			add $s4, $s4, $a0 ## $s4 = address of array[ j + 1 ]
			
			lw $s4, 0($s4) ## $s4 = array[j + 1]
			
			## if $s2 > $s4, we should swap them
			sgt $s5, $s2, $s4 ## if $s2 > $s4, then $s5 = 1, else $s5 = 0
			beq $s5, $0, else
			
			## $s5 can be used as temporary variable
			add $s5, $0, $s2 ## temp = array[j]
			
			sll $s2, $s1, 2 ## $s2 = $s1 * 4 = j * 4
			add $s2, $s2, $a0 ## $s2 = address of array[j]
			sw $s4, 0($s2) ## array[j] = array[j + 1]
			
			add $s6, $s1, 1 ## $s6 = j + 1 
			sll $s4, $s6, 2 ## $s4 = $s1 * 4 = (j + 1) * 4
			add $s4, $s4, $a0 ## $s4 = address of array[ j + 1 ]
			
			sw $s5, 0($s4) ## array[ j + 1 ] = temp
			
			addi $s1, $s1, 1 ## j++
			j for2
		else:	
			addi $s1, $s1, 1
			j for2
	done2:	addi $s0, $s0, 1
		j for1
	done1:	
	
	lw $s0, 0($sp)
	lw $s1, 4($sp)
	lw $s2, 8($sp)
	lw $s3, 12($sp)
	lw $s4, 16($sp)
	lw $s5, 20($sp)
	lw $s6, 24($sp)
	lw $ra, 28($sp)
	lw $a0, 32($sp)
	lw $a1, 36($sp)
	addi $sp, $sp, 40
	jr $ra

processArray:	## $a0 is the base address of the array
		## $a1 is the size of the array
		addi $sp, $sp, -20
		sw $s0, 0($sp)
		sw $s1, 4($sp)
		sw $s2, 8($sp)
		sw $s7, 12($sp)
		sw $a0, 16($sp)
		sw $a1, 20($sp)
		sw $ra, 24($sp)
		
		add $s7, $a0, $0
		addi $s0, $0, 0	## index = 0
		
					
		la $a0, printingMessage
		li $v0, 4
		syscall 
		
		forProcess:	## Printing is starting
			slt $s2, $s0, $a1
			beq $s2, 0, doneProcess

			
			li $v0, 1		##
			add $a0, $s0, $zero	## Print the index 
			syscall			##
			
			la $a0, tab
			li $v0, 4		## Print Tab (SPACE)
			syscall
			
			sll $s1, $s0, 2		## $s1 = i * 4
			add $s1, $s1, $s7	## $s1 = address of array[i]
			lw $s1, 0($s1)		## $s1 = array[i]
			
			li $v0, 1
			add $a0, $s1, $zero	## Print array[i]
			syscall
			
			add $a0, $s1, $0
									
			jal sumDigit
			add $s1, $v0, $0	## $s1 is the return value (sum of digits)
			
			la $a0, tab
			li $v0, 4		## Print Tab (SPACE)
			syscall
			
			li $v0, 1
			add $a0, $s1, $zero	## Print sum of digits
			syscall
			
			la $a0, tab
			li $v0, 4		## Print Tab (SPACE)
			syscall
			
			sll $s1, $s0, 2		## $s1 = i * 4
			add $s1, $s1, $s7	## $s1 = address of array[i]
			lw $s1, 0($s1)		## $s1 = array[i]
			
			add $a0, $0, $s1	## $a0 = array[i]
			jal checkPrime		## $v0 = 1 if array[i] is Prime
			add $s1, $v0, $0	## $s1 = return value
			
			beq $v0, 0, notPrime2
			beq $v0, 1, yesPrime
		noLabel:			
		yesLabel:
			addi $s0, $s0, 1	
			
			la $a0, line
			li $v0, 4
			syscall
			
			j forProcess
notPrime2:	
		la $a0, no
		li $v0, 4
		syscall
		j noLabel

yesPrime:	la $a0, yes
		li $v0, 4
		syscall
		j yesLabel	
doneProcess:	
		lw $s0, 0($sp)
		lw $s1, 4($sp)
		lw $s2, 8($sp)
		lw $s7, 12($sp)
		lw $a0, 16($sp)
		lw $a1, 20($sp)
		lw $ra, 24($sp)
		addi $sp, $sp, 20
		jr $ra		
			
			
			

sumDigit:	
		addi $sp, $sp, -20
		sw $s0, 0($sp)
		sw $s1, 4($sp)
		sw $s2, 8($sp)
		sw $a0, 12($sp)
		sw $ra, 16($sp)
	## $a0 = a number
	## $v0 = sum of its digits
		addi $s1, $0, 10
		add $v0, $0, $0
		
		while:  sgt $s0, $a0, 0 ## if num > 0, $s0 = 1, else $s0 = 0
		beq $s0, 0, done
		div $a0, $s1 ## LO = Quotient, HI = Remainder
		mfhi $s2
		
		add $v0, $v0, $s2
		mflo $s2
		add $a0, $0, $s2
		
		j while
	done:	
		lw $s0, 0($sp)
		lw $s1, 4($sp)
		lw $s2, 8($sp)
		lw $a0, 12($sp)
		lw $ra, 16($sp)
		addi $sp, $sp, 20
		jr $ra

checkPrime: 	## $a0 is the number to be checked
	add $sp, $sp, -20
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	sw $a0, 8($sp)
	sw $ra, 12($sp)
	sw $s2, 16($sp)
	
	addi $s1, $0, 2 ## $s1 = 2
	add $s0, $a0, $0 ## $s0 = number
	div $s0, $s1 ## check whether number is odd or even
	
	mfhi $s0
	beq $s0, 1, numIsOdd	## If it is odd, then increment the sqrt by 1
	beq $s0, 0, notPrime	## If it is even, no need to check, it is not prime
	
	numIsOdd: 
	jal isqrt
	addi $s2, $v0, 1
	
	addi $s0, $0, 2 ## $s0 = i = 2
	
	addi $v0, $0, 1	## First, assume number is prime
	
	whilePrime:	slt $s1, $s0, $s2	## if i < num, $s1 = 1, else $s1 = 0
		beq $s1, 0, donePrime	## if i >= num, jump to done
		
		div $a0, $s0	## (num) div (i), HI = Remainder, LO = Quotient
		mfhi $s1 ## $s1 is the quotient
		
		beq $s1, 0, notPrime
		addi $s0, $s0, 1
		j whilePrime
	notPrime: add $v0, $0, $0	## $v0 = 0, the number is not prime
		  j donePrime
	
	donePrime:	
		lw $s0, 0($sp)
		lw $s1, 4($sp)
		lw $a0, 8($sp)
		lw $ra, 12($sp)
		lw $s2, 16($sp)
		addi $sp, $sp, 20
		jr $ra

isqrt:
	addi $sp, $sp, -24
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	sw $s3, 12($sp)
	sw $ra, 16($sp)
	sw $a0, 20($sp)
  # v0 - return / root
  # s0 - bit
  # s1 - num
  # s2,s3 - temps
  move  $v0, $zero        # initalize return
  move  $s1, $a0          # move a0 to t1

  addi  $s0, $zero, 1
  sll   $s0, $s0, 30      # shift to second-to-top bit

isqrt_bit:
  slt   $s2, $s1, $s0     # num < bit
  beq   $s2, $zero, isqrt_loop

  srl   $s0, $s0, 2       # bit >> 2
  j     isqrt_bit

isqrt_loop:
  beq   $s0, $zero, isqrt_return

  add   $s3, $v0, $s0     # t3 = return + bit
  slt   $s2, $s1, $s3
  beq   $s2, $zero, isqrt_else

  srl   $v0, $v0, 1       # return >> 1
  j     isqrt_loop_end

isqrt_else:
  sub   $s1, $s1, $s3     # num -= return + bit
  srl   $v0, $v0, 1       # return >> 1
  add   $v0, $v0, $s0     # return + bit

isqrt_loop_end:
  srl   $s0, $s0, 2       # bit >> 2
  j     isqrt_loop

isqrt_return:
	lw $s0, 0($sp)
	lw $s1, 4($sp)
	lw $s2, 8($sp)
	lw $s3, 12($sp)
	lw $ra, 16($sp)
	lw $a0, 20($sp)
	addi $sp, $sp, 24
  jr  $ra
